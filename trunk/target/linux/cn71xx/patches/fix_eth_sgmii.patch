diff -Naur a/arch/mips/cavium-octeon/executive/cvmx-helper.c b/arch/mips/cavium-octeon/executive/cvmx-helper.c
--- a/arch/mips/cavium-octeon/executive/cvmx-helper.c	2015-02-03 13:11:43.000000000 -0800
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper.c	2015-06-09 12:54:59.754020000 -0700
@@ -50,6 +50,7 @@
 #include <asm/octeon/cvmx-sriox-defs.h>
 #include <asm/octeon/cvmx-npi-defs.h>
 #include <asm/octeon/cvmx-mio-defs.h>
+#include <asm/octeon/cvmx-pcsx-defs.h>
 #include <asm/octeon/cvmx-pexp-defs.h>
 #include <asm/octeon/cvmx-pip-defs.h>
 #include <asm/octeon/cvmx-asxx-defs.h>
@@ -1964,6 +1965,7 @@
     int packet_pool = (int)cvmx_fpa_get_packet_pool();
     uint64_t packet_pool_size = cvmx_fpa_get_packet_pool_block_size();
     int wqe_pool = (int)cvmx_fpa_get_wqe_pool();
+	cvmx_pcsx_mrx_control_reg_t control_reg;
 
 	/* Step 1: Disable all backpressure */
 	for (interface = 0; interface < num_interfaces; interface++) {
@@ -2099,6 +2101,23 @@
 					cvmx_dprintf("GMX TX path timeout waiting for idle\n");
 					result = -1;
 				}
+
+				/* For SGMII some PHYs require that the PCS
+				 * interface be powered down and reset (i.e.
+				 * Atheros/Qualcomm PHYs).
+				 */
+				if (cvmx_helper_interface_get_mode(interface) ==
+				    CVMX_HELPER_INTERFACE_MODE_SGMII) {
+					uint64_t reg;
+
+					reg = CVMX_PCSX_MRX_CONTROL_REG(index,
+									interface);
+					/* Power down the interface */
+					control_reg.u64 = cvmx_read_csr(reg);
+					control_reg.s.pwr_dn = 1;
+					cvmx_write_csr(reg, control_reg.u64);
+					cvmx_read_csr(reg);
+				}
 			}
 			break;
 		case CVMX_HELPER_INTERFACE_MODE_AGL:
diff -Naur a/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c b/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c	2015-02-03 13:11:43.000000000 -0800
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c	2015-06-09 12:47:09.868176000 -0700
@@ -80,11 +80,28 @@
 /* #define CVMX_HELPER_CFG_DEBUG */
 
 CVMX_SHARED struct cvmx_cfg_port_param cvmx_cfg_port[CVMX_HELPER_MAX_IFACE][CVMX_HELPER_CFG_MAX_PORT_PER_IFACE] =
-	{[0 ... CVMX_HELPER_MAX_IFACE - 1] = {[0 ... CVMX_HELPER_CFG_MAX_PORT_PER_IFACE - 1] =
-				      	      { CVMX_HELPER_CFG_INVALID_VALUE, CVMX_HELPER_CFG_INVALID_VALUE,
-				                CVMX_HELPER_CFG_INVALID_VALUE, CVMX_HELPER_CFG_INVALID_VALUE,
-	                                        CVMX_HELPER_CFG_INVALID_VALUE, 0,
-	                                        0}}};
+	{[0 ... CVMX_HELPER_MAX_IFACE - 1] =
+		{[0 ... CVMX_HELPER_CFG_MAX_PORT_PER_IFACE - 1] = {
+#ifndef CVMX_BUILD_FOR_LINUX_KERNEL
+			.port_fdt_node = CVMX_HELPER_CFG_INVALID_VALUE,
+			.phy_fdt_node = CVMX_HELPER_CFG_INVALID_VALUE,
+#endif
+			.phy_info = NULL,
+			.ccpp_pknd = CVMX_HELPER_CFG_INVALID_VALUE,
+			.ccpp_bpid = CVMX_HELPER_CFG_INVALID_VALUE,
+			.ccpp_pko_port_base = CVMX_HELPER_CFG_INVALID_VALUE,
+			.ccpp_pko_num_ports = CVMX_HELPER_CFG_INVALID_VALUE,
+			.agl_rx_clk_skew = 0,
+			.valid = true,
+			.sgmii_phy_mode = false,
+			.sgmii_1000x_mode = false,
+			.agl_rx_clk_delay_bypass = false,
+			.force_link_up = false,
+			.disable_an = false,
+			.link_down_pwr_dn = false
+		}
+	}
+};
 
 /*
  * Indexed by the pko_port number
@@ -920,3 +937,115 @@
 	}
 	return rv;
 }
+
+#ifndef CVMX_BUILD_FOR_LINUX_KERNEL
+/**
+ * @INTERNAL
+ * Store the FDT node offset in the device tree of a port
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @param node_offset	node offset to store
+ */
+void cvmx_helper_set_port_fdt_node_offset(int interface, int index,
+					  int node_offset)
+{
+	cvmx_cfg_port[interface][index].port_fdt_node = node_offset;
+}
+
+/**
+ * @INTERNAL
+ * Return the FDT node offset in the device tree of a port
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @return		node offset of port or -1 if invalid
+ */
+int cvmx_helper_get_port_fdt_node_offset(int interface, int index)
+{
+	return cvmx_cfg_port[interface][index].port_fdt_node;
+}
+
+/**
+ * @INTERNAL
+ * Store the FDT node offset in the device tree of a phy
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @param node_offset	node offset to store
+ */
+void cvmx_helper_set_phy_fdt_node_offset(int interface, int index, int node_offset)
+{
+	cvmx_cfg_port[interface][index].phy_fdt_node = node_offset;
+}
+
+/**
+ * @INTERNAL
+ * Return the FDT node offset in the device tree of a phy
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @return		node offset of phy or -1 if invalid
+ */
+int cvmx_helper_get_phy_fdt_node_offset(int interface, int index)
+{
+	return cvmx_cfg_port[interface][index].phy_fdt_node;
+}
+
+/**
+ * @INTERNAL
+ * Override default autonegotiation for a port
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @param enable	true to enable autonegotiation, false to force full
+ *			duplex, full speed.
+ */
+void cvmx_helper_set_port_autonegotiation(int interface, int index, bool enable)
+{
+	cvmx_cfg_port[interface][index].disable_an = !enable;
+}
+#endif /* !CVMX_BUILD_FOR_LINUX_KERNEL */
+
+/**
+ * INTERNAL
+ * Returns if autonegotiation is enabled or not.
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ *
+ * @return 0 if autonegotiation is disabled, 1 if enabled.
+ */
+bool cvmx_helper_get_port_autonegotiation(int interface, int index)
+{
+	return !cvmx_cfg_port[interface][index].disable_an;
+}
+
+/**
+ * @INTERNAL
+ * Sets the PHY info data structure
+ *
+ * @param interface
+ * @param index		port index
+ * @param[in] phy_info	phy information data structure pointer
+ */
+void cvmx_helper_set_port_phy_info(int interface, int index,
+				   struct cvmx_phy_info *phy_info)
+{
+	cvmx_cfg_port[interface][index].phy_info = phy_info;
+}
+
+/**
+ * @INTERNAL
+ * Returns the PHY information data structure for a port
+ *
+ * @param interface
+ * @param index		port index
+ *
+ * @return pointer to PHY information data structure or NULL if not set
+ */
+struct cvmx_phy_info *
+cvmx_helper_get_port_phy_info(int interface, int index)
+{
+	return cvmx_cfg_port[interface][index].phy_info;
+}
\ No newline at end of file
diff -Naur a/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c b/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c	2015-02-03 13:11:43.000000000 -0800
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c	2015-06-09 11:09:46.644515000 -0700
@@ -187,21 +187,12 @@
 	union cvmx_pcsx_mrx_control_reg control_reg;
 	union cvmx_pcsx_miscx_ctl_reg pcsx_miscx_ctl_reg;
 	bool phy_mode;
-	bool mode_1000x;
+	bool an_disable;	/** Disable autonegotiation */
+	bool mode_1000x;	/** 1000Base-X mode */
 
 	if (!cvmx_helper_is_port_valid(interface, index))
 		return 0;
 
-        //liteon+
-        //fixed sgmii0/1 disconnection after ifconfig eth0/1 up->down->up 
-	    control_reg.u64 = cvmx_read_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface));
-        control_reg.s.an_en = 0;
-        control_reg.s.pwr_dn = 1;
-        cvmx_write_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface), control_reg.u64);
-        mdelay(10);
-        //liteon-
-
-
 	/*
 	 * Take PCS through a reset sequence.
 	 * PCS*_MR*_CONTROL_REG[PWR_DN] should be cleared to zero.
@@ -229,20 +220,53 @@
 	 * Write PCS*_MR*_CONTROL_REG[RST_AN]=1 to ensure a fresh
 	 * sgmii negotiation starts.
 	 */
-	control_reg.s.an_en = 1;
+	phy_mode = cvmx_helper_get_mac_phy_mode(interface, index);
+	an_disable = (phy_mode ||
+		      !cvmx_helper_get_port_autonegotiation(interface, index));
+
+	control_reg.s.an_en = !an_disable;
+
+	/* Force a PCS reset by powering down the PCS interface
+	 * This is needed to deal with broken Qualcomm/Atheros PHYs and switches
+	 * which never recover if PCS is not power cycled.  The alternative
+	 * is to power cycle or hardware reset the Qualcomm devices whenever
+	 * SGMII is initialized.
+	 *
+	 * This is needed for the QCA8033 PHYs as well as the QCA833X switches
+	 * to work.  The QCA8337 switch has additional SGMII problems and is
+	 * best avoided if at all possible.  Failure to power cycle PCS prevents
+	 * any traffic from flowing between Octeon and Qualcomm devices if there
+	 * is a warm reset.  Even a software reset to the Qualcomm device will
+	 * not work.
+	 *
+	 * Note that this problem has been reported between Qualcomm and other
+	 * vendor's processors as well so this problem is not unique to
+	 * Qualcomm and Octeon.
+	 *
+	 * Power cycling PCS doesn't hurt anything with non-Qualcomm devices
+	 * other than adding a 25ms delay during initialization.
+	 */
+	control_reg.s.pwr_dn = 1;
+	cvmx_write_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface),
+		       control_reg.u64);
+	cvmx_read_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface));
+
+	if (cvmx_sysinfo_get()->board_type != CVMX_BOARD_TYPE_SIM)
+		/* 25ms should be enough, 10ms is too short */
+		cvmx_wait_usec(25000);
+
 	control_reg.s.pwr_dn = 0;
 	cvmx_write_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface),
 		       control_reg.u64);
 
 	/* The Cortina PHY runs in 1000base-X mode */
-	phy_mode = cvmx_helper_get_mac_phy_mode(interface, index);
 	mode_1000x = cvmx_helper_get_1000x_mode(interface, index);
 	pcsx_miscx_ctl_reg.u64 =
 		cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface));
 	pcsx_miscx_ctl_reg.s.mode = mode_1000x;
 	pcsx_miscx_ctl_reg.s.mac_phy = phy_mode;
 	cvmx_write_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface), pcsx_miscx_ctl_reg.u64);
-	if (phy_mode)
+	if (an_disable)
 		/* In PHY mode we can't query the link status so we just
 		 * assume that the link is up.
 		 */
@@ -644,6 +668,9 @@
 		speed = cvmx_qlm_get_gbaud_mhz(0) * 8 / 10;
 	} else if (OCTEON_IS_MODEL(OCTEON_CN70XX)) {
 		speed = cvmx_qlm_get_gbaud_mhz(0) * 8 / 10;
+		if (cvmx_qlm_get_dlm_mode(0, interface) == CVMX_QLM_MODE_SGMII)
+			speed >>= 1;
+		else
 		speed >>= 2;
 	}
 
@@ -689,12 +716,17 @@
 int __cvmx_helper_sgmii_link_set(int ipd_port,
 				 cvmx_helper_link_info_t link_info)
 {
+	union cvmx_pcsx_mrx_control_reg control_reg;
 	int interface = cvmx_helper_get_interface_num(ipd_port);
 	int index = cvmx_helper_get_interface_index_num(ipd_port);
 
 	if (!cvmx_helper_is_port_valid(interface, index))
 		return 0;
 
+	/* For some devices, i.e. the Qualcomm QCA8337 switch we need to power
+	 * down the PCS interface when the link goes down and power it back
+	 * up when the link returns.
+	 */
 	if (link_info.s.link_up || !__cvmx_helper_need_g15618()) {
 		__cvmx_helper_sgmii_hardware_init_link(interface, index);
 	} else {
@@ -703,17 +735,21 @@
 		pcsx_miscx_ctl_reg.u64 = cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG
 						(index, interface));
 
-		/* Disable autonegotiation only when MAC mode. */
-		if (pcsx_miscx_ctl_reg.s.mac_phy == 0) {
-			union cvmx_pcsx_mrx_control_reg control_reg;
-			control_reg.u64 = cvmx_read_csr(
-						CVMX_PCSX_MRX_CONTROL_REG(
-							index, interface));
+		/* Disable autonegotiation only when MAC mode is enabled or
+		 *  autonegotiation is disabled.
+		 */
+		control_reg.u64 = cvmx_read_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface));
+		if (pcsx_miscx_ctl_reg.s.mac_phy == 0 ||
+		    !cvmx_helper_get_port_autonegotiation(interface, index)) {
+
 			control_reg.s.an_en = 0;
+			control_reg.s.spdmsb = 1;
+			control_reg.s.spdlsb = 0;
+			control_reg.s.dup = 1;
+		}
 			cvmx_write_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface),
 					control_reg.u64);
 			cvmx_read_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface));
-		}
 		/*
 		 * Use GMXENO to force the link down it will get
 		 * reenabled later...
diff -Naur a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
--- a/arch/mips/cavium-octeon/setup.c	2015-02-03 13:11:43.000000000 -0800
+++ b/arch/mips/cavium-octeon/setup.c	2015-06-10 11:22:15.411847659 -0700
@@ -322,10 +322,7 @@
 #endif
 
 	mb();
-
-//liteon remove+
-//	while (1)
-//liteon remove-
+	while (1)
 		if (OCTEON_IS_OCTEON3())
 			cvmx_write_csr(CVMX_RST_SOFT_RST, 1);
 		else
diff -Naur a/arch/mips/include/asm/octeon/cvmx-helper-cfg.h b/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
--- a/arch/mips/include/asm/octeon/cvmx-helper-cfg.h	2015-02-03 13:11:43.000000000 -0800
+++ b/arch/mips/include/asm/octeon/cvmx-helper-cfg.h	2015-06-09 12:48:34.498656000 -0700
@@ -113,19 +113,27 @@
 };
 typedef enum cvmx_helper_cfg_option cvmx_helper_cfg_option_t;
 
+struct cvmx_phy_info;
 /*
  * Per physical port
+ * Note: This struct is passed between linux and SE apps.
  */
 struct cvmx_cfg_port_param {
+	int port_fdt_node;		/** Node offset in FDT of node */
+	int phy_fdt_node;		/** Node offset in FDT of PHY */
+	struct cvmx_phy_info *phy_info;	/** Data structure with PHY information */
 	int8_t ccpp_pknd;
 	int8_t ccpp_bpid;
 	int8_t ccpp_pko_port_base;
 	int8_t ccpp_pko_num_ports;
-	bool valid;			/** 1 = port valid, 0 = invalid */
-	bool sgmii_phy_mode;		/** 1 = port in PHY mode, 0 = MAC mode */
-	bool sgmii_1000x_mode;		/** 1 = 1000Base-X mode, 0 = SGMII mode */
-	bool agl_rx_clk_delay_bypass;	/** 1 = use rx clock delay bypass for AGL mode */
 	uint8_t agl_rx_clk_skew;	/** AGL rx clock skew setting (default 0) */
+	bool valid:1;			/** 1 = port valid, 0 = invalid */
+	bool sgmii_phy_mode:1;		/** 1 = port in PHY mode, 0 = MAC mode */
+	bool sgmii_1000x_mode:1;	/** 1 = 1000Base-X mode, 0 = SGMII mode */
+	bool agl_rx_clk_delay_bypass:1;	/** 1 = use rx clock delay bypass for AGL mode */
+	bool force_link_up:1;		/** Ignore PHY and always report link up */
+	bool disable_an:1;		/** True to disable autonegotiation */
+	bool link_down_pwr_dn:1;	/** Power PCS off when link is down */
 };
 
 /*
@@ -482,6 +490,94 @@
 extern uint8_t cvmx_helper_get_agl_rx_clock_skew(int interface, int index);
 extern void cvmx_helper_set_agl_rx_clock_skew(int interface, int index,
 					      uint8_t value);
+#ifndef CVMX_BUILD_FOR_LINUX_KERNEL
+/**
+ * @INTERNAL
+ * Store the FDT node offset in the device tree of a port
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @param node_offset	node offset to store
+ */
+extern void cvmx_helper_set_port_fdt_node_offset(int interface, int index,
+						 int node_offset);
+
+/**
+ * @INTERNAL
+ * Return the FDT node offset in the device tree of a port
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @return		node offset of port or -1 if invalid
+ */
+extern int cvmx_helper_get_port_fdt_node_offset(int interface, int index);
+
+/**
+ * @INTERNAL
+ * Store the FDT node offset in the device tree of a phy
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @param node_offset	node offset to store
+ */
+extern void cvmx_helper_set_phy_fdt_node_offset(int interface, int index,
+						int node_offset);
+
+/**
+ * @INTERNAL
+ * Return the FDT node offset in the device tree of a phy
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @return		node offset of phy or -1 if invalid
+ */
+extern int cvmx_helper_get_phy_fdt_node_offset(int interface, int index);
+#endif /* !CVMX_BUILD_FOR_LINUX_KERNEL */
+
+/**
+ * @INTERNAL
+ * Override default autonegotiation for a port
+ *
+ * @param interface	node and interface
+ * @param index		port index
+ * @param enable	true to enable autonegotiation, false to force full
+ *			duplex, full speed.
+ */
+extern void cvmx_helper_set_port_autonegotiation(int interface, int index,
+						 bool enable);
+
+/**
+ * INTERNAL
+ * Returns if autonegotiation is enabled or not.
+ *
+ * @param interface
+ * @param index		port index
+ *
+ * @return 0 if autonegotiation is disabled, 1 if enabled.
+ */
+extern bool cvmx_helper_get_port_autonegotiation(int interface, int index);
+
+/**
+ * @INTERNAL
+ * Sets the PHY info data structure
+ *
+ * @param interface
+ * @param index		port index
+ * @param[in] phy_info	phy information data structure pointer
+ */
+extern void cvmx_helper_set_port_phy_info(int interface, int index,
+					  struct cvmx_phy_info *phy_info);
+/**
+ * @INTERNAL
+ * Returns the PHY information data structure for a port
+ *
+ * @param interface
+ * @param index		port index
+ *
+ * @return pointer to PHY information data structure or NULL if not set
+ */
+extern struct cvmx_phy_info *cvmx_helper_get_port_phy_info(int interface, int index);
+
 /*
  * Initializes cvmx with user specified config info.
  */
diff -Naur a/drivers/net/ethernet/octeon/ethernet.c b/drivers/net/ethernet/octeon/ethernet.c
--- a/drivers/net/ethernet/octeon/ethernet.c	2015-02-03 13:12:04.000000000 -0800
+++ b/drivers/net/ethernet/octeon/ethernet.c	2015-06-10 11:23:57.198922311 -0700
@@ -687,6 +687,7 @@
 	.ndo_init		= cvm_oct_spi_init,
 	.ndo_uninit		= cvm_oct_spi_uninit,
 	.ndo_open		= cvm_oct_phy_setup_device,
+	.ndo_stop		= cvm_oct_common_stop,
 	.ndo_start_xmit		= cvm_oct_xmit,
 	.ndo_set_rx_mode	= cvm_oct_set_rx_filter,
 	.ndo_set_mac_address	= cvm_oct_set_mac_address,
@@ -793,7 +794,7 @@
 		if (s->key > port_number)
 			n = n->rb_left;
 		else if (s->key < port_number)
-			n = n->rb_left;
+			n = n->rb_right;
 		else
 			return s;
 	}
diff -Naur a/drivers/net/ethernet/octeon/ethernet-mdio.c b/drivers/net/ethernet/octeon/ethernet-mdio.c
--- a/drivers/net/ethernet/octeon/ethernet-mdio.c	2015-02-03 13:12:04.000000000 -0800
+++ b/drivers/net/ethernet/octeon/ethernet-mdio.c	2015-06-10 09:42:19.794328000 -0700
@@ -214,6 +214,7 @@
 		case CVMX_HELPER_INTERFACE_MODE_XAUI:
 		case CVMX_HELPER_INTERFACE_MODE_RXAUI:
 		case CVMX_HELPER_INTERFACE_MODE_SGMII:
+		case CVMX_HELPER_INTERFACE_MODE_QSGMII:
 			break;
 		default:
 			/* No timestamp support*/
@@ -490,6 +491,12 @@
 	struct octeon_ethernet *priv = netdev_priv(dev);
 	cvmx_helper_link_info_t link_info;
 
+	priv->poll = NULL;
+
+	if (priv->phydev)
+		phy_disconnect(priv->phydev);
+	priv->phydev = NULL;
+
 	if (priv->last_link) {
 		link_info.u64 = 0;
 		priv->last_link = 0;
@@ -532,6 +539,7 @@
 		iface = PHY_INTERFACE_MODE_RGMII;
 		break;
 	case CVMX_HELPER_INTERFACE_MODE_SGMII:
+	case CVMX_HELPER_INTERFACE_MODE_QSGMII:
 		iface = PHY_INTERFACE_MODE_SGMII;
 		break;
 	default:
diff -Naur a/drivers/net/ethernet/octeon/ethernet-rgmii.c b/drivers/net/ethernet/octeon/ethernet-rgmii.c
--- a/drivers/net/ethernet/octeon/ethernet-rgmii.c	2015-02-03 13:12:04.000000000 -0800
+++ b/drivers/net/ethernet/octeon/ethernet-rgmii.c	2015-06-08 16:05:40.735744000 -0700
@@ -280,7 +280,7 @@
 	cvmx_write_csr(CVMX_IPD_SUB_PORT_FCS, ipd_sub_port_fcs.u64);
 	priv->rx_strip_fcs = 0;
 
-	return 0;
+	return cvm_oct_common_stop(dev);
 }
 
 int cvm_oct_rgmii_init(struct net_device *dev)
diff -Naur a/drivers/net/ethernet/octeon/ethernet-sgmii.c b/drivers/net/ethernet/octeon/ethernet-sgmii.c
--- a/drivers/net/ethernet/octeon/ethernet-sgmii.c	2015-02-03 13:12:04.000000000 -0800
+++ b/drivers/net/ethernet/octeon/ethernet-sgmii.c	2015-06-10 11:23:31.714152805 -0700
@@ -197,12 +197,6 @@
 		priv->hw_status_notifier.notifier_call = NULL;
 	}
 
-	priv->poll = NULL;
-
-	if (priv->phydev)
-		phy_disconnect(priv->phydev);
-	priv->phydev = NULL;
-
 	return cvm_oct_common_stop(dev);
 }
 
diff -Naur a/drivers/net/ethernet/octeon/octeon_mgmt.c b/drivers/net/ethernet/octeon/octeon_mgmt.c
--- a/drivers/net/ethernet/octeon/octeon_mgmt.c	2015-02-03 13:12:04.000000000 -0800
+++ b/drivers/net/ethernet/octeon/octeon_mgmt.c	2015-06-08 16:08:06.831787000 -0700
@@ -750,6 +750,9 @@
 
 	prtx_cfg.u64 = cvmx_read_csr(p->agl + AGL_GMX_PRT_CFG);
 
+	if (!p->phydev)
+		return;
+
 	if (!p->phydev->link)
 		prtx_cfg.s.duplex = 1;
 	else
@@ -876,6 +879,45 @@
 	return 0;
 }
 
+static int octeon_mgmt_stop(struct net_device *netdev)
+{
+	struct octeon_mgmt *p = netdev_priv(netdev);
+
+	napi_disable(&p->napi);
+	netif_stop_queue(netdev);
+
+	if (p->phydev)
+		phy_disconnect(p->phydev);
+	p->phydev = NULL;
+
+	netif_carrier_off(netdev);
+
+	octeon_mgmt_reset_hw(p);
+
+	if (p->irq)
+		free_irq(p->irq, netdev);
+
+	/* dma_unmap is a nop on Octeon, so just free everything.  */
+	skb_queue_purge(&p->tx_list);
+	skb_queue_purge(&p->rx_list);
+
+	if (p->rx_ring_handle)
+		dma_unmap_single(p->dev, p->rx_ring_handle,
+				 ring_size_to_bytes(OCTEON_MGMT_RX_RING_SIZE),
+				 DMA_BIDIRECTIONAL);
+	if (p->rx_ring)
+		kfree(p->rx_ring);
+
+	if (p->tx_ring_handle)
+		dma_unmap_single(p->dev, p->tx_ring_handle,
+				 ring_size_to_bytes(OCTEON_MGMT_TX_RING_SIZE),
+				 DMA_BIDIRECTIONAL);
+	if (p->tx_ring)
+		kfree(p->tx_ring);
+
+	return 0;
+}
+
 static int octeon_mgmt_open(struct net_device *netdev)
 {
 	struct octeon_mgmt *p = netdev_priv(netdev);
@@ -1133,54 +1175,13 @@
 	napi_enable(&p->napi);
 
 	return 0;
+
 err_noirq:
-	octeon_mgmt_reset_hw(p);
-	dma_unmap_single(p->dev, p->rx_ring_handle,
-			 ring_size_to_bytes(OCTEON_MGMT_RX_RING_SIZE),
-			 DMA_BIDIRECTIONAL);
-	kfree(p->rx_ring);
 err_nomem:
-	dma_unmap_single(p->dev, p->tx_ring_handle,
-			 ring_size_to_bytes(OCTEON_MGMT_TX_RING_SIZE),
-			 DMA_BIDIRECTIONAL);
-	kfree(p->tx_ring);
+	octeon_mgmt_stop(netdev);
 	return -ENOMEM;
 }
 
-static int octeon_mgmt_stop(struct net_device *netdev)
-{
-	struct octeon_mgmt *p = netdev_priv(netdev);
-
-	napi_disable(&p->napi);
-	netif_stop_queue(netdev);
-
-	if (p->phydev)
-		phy_disconnect(p->phydev);
-	p->phydev = NULL;
-
-	netif_carrier_off(netdev);
-
-	octeon_mgmt_reset_hw(p);
-
-	free_irq(p->irq, netdev);
-
-	/* dma_unmap is a nop on Octeon, so just free everything.  */
-	skb_queue_purge(&p->tx_list);
-	skb_queue_purge(&p->rx_list);
-
-	dma_unmap_single(p->dev, p->rx_ring_handle,
-			 ring_size_to_bytes(OCTEON_MGMT_RX_RING_SIZE),
-			 DMA_BIDIRECTIONAL);
-	kfree(p->rx_ring);
-
-	dma_unmap_single(p->dev, p->tx_ring_handle,
-			 ring_size_to_bytes(OCTEON_MGMT_TX_RING_SIZE),
-			 DMA_BIDIRECTIONAL);
-	kfree(p->tx_ring);
-
-	return 0;
-}
-
 static int octeon_mgmt_xmit(struct sk_buff *skb, struct net_device *netdev)
 {
 	struct octeon_mgmt *p = netdev_priv(netdev);
@@ -1319,6 +1320,37 @@
 #endif
 };
 
+static int octeon_mgmt_remove(struct platform_device *pdev)
+{
+	struct net_device *netdev = dev_get_drvdata(&pdev->dev);
+	struct octeon_mgmt *p = netdev_priv(netdev);
+
+	if (p->napi.dev)
+		netif_napi_del(&p->napi);
+	tasklet_kill(&p->tx_clean_tasklet);
+	unregister_netdev(netdev);
+	dev_set_drvdata(&pdev->dev, NULL);
+	free_netdev(netdev);
+
+	if (p->agl_prt_ctl)
+		devm_iounmap(&pdev->dev,
+			(void __iomem *)p->agl_prt_ctl);
+	if (p->agl_prt_ctl_phys)
+		devm_release_region(&pdev->dev,
+			p->agl_prt_ctl_phys, p->agl_prt_ctl_size);
+	if (p->agl)
+		devm_iounmap(&pdev->dev,
+			(void __iomem *)p->agl);
+	if (p->agl_phys)
+		devm_release_region(&pdev->dev, p->agl_phys, p->agl_size);
+	if (p->mix)
+		devm_iounmap(&pdev->dev,
+			(void __iomem *)p->mix);
+	if (p->mix_phys)
+		devm_release_region(&pdev->dev, p->mix_phys, p->mix_size);
+	return 0;
+}
+
 static int octeon_mgmt_probe(struct platform_device *pdev)
 {
 	struct net_device *netdev;
@@ -1362,55 +1394,54 @@
 		goto err;
 
 	p->irq = result;
+	result = -ENXIO; /* default err from here down */
 
 	res_mix = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (res_mix == NULL) {
 		dev_err(&pdev->dev, "no 'reg' resource\n");
-		result = -ENXIO;
 		goto err;
 	}
 
 	res_agl = platform_get_resource(pdev, IORESOURCE_MEM, 1);
 	if (res_agl == NULL) {
 		dev_err(&pdev->dev, "no 'reg' resource\n");
-		result = -ENXIO;
 		goto err;
 	}
 
 	res_agl_prt_ctl = platform_get_resource(pdev, IORESOURCE_MEM, 3);
 	if (res_agl_prt_ctl == NULL) {
 		dev_err(&pdev->dev, "no 'reg' resource\n");
-		result = -ENXIO;
 		goto err;
 	}
 
 	p->mix_phys = res_mix->start;
 	p->mix_size = resource_size(res_mix);
-	p->agl_phys = res_agl->start;
-	p->agl_size = resource_size(res_agl);
-	p->agl_prt_ctl_phys = res_agl_prt_ctl->start;
-	p->agl_prt_ctl_size = resource_size(res_agl_prt_ctl);
-
 
 	if (!devm_request_mem_region(&pdev->dev, p->mix_phys, p->mix_size,
 				     res_mix->name)) {
+		p->mix_phys = 0;
 		dev_err(&pdev->dev, "request_mem_region (%s) failed\n",
 			res_mix->name);
-		result = -ENXIO;
 		goto err;
 	}
 
+	p->agl_phys = res_agl->start;
+	p->agl_size = resource_size(res_agl);
+
 	if (!devm_request_mem_region(&pdev->dev, p->agl_phys, p->agl_size,
 				     res_agl->name)) {
-		result = -ENXIO;
+		p->agl_phys = 0;
 		dev_err(&pdev->dev, "request_mem_region (%s) failed\n",
 			res_agl->name);
 		goto err;
 	}
 
+	p->agl_prt_ctl_phys = res_agl_prt_ctl->start;
+	p->agl_prt_ctl_size = resource_size(res_agl_prt_ctl);
+
 	if (!devm_request_mem_region(&pdev->dev, p->agl_prt_ctl_phys,
 				     p->agl_prt_ctl_size, res_agl_prt_ctl->name)) {
-		result = -ENXIO;
+		p->agl_prt_ctl_phys = 0;
 		dev_err(&pdev->dev, "request_mem_region (%s) failed\n",
 			res_agl_prt_ctl->name);
 		goto err;
@@ -1453,19 +1484,10 @@
 	return 0;
 
 err:
-	free_netdev(netdev);
+	octeon_mgmt_remove(pdev);
 	return result;
 }
 
-static int octeon_mgmt_remove(struct platform_device *pdev)
-{
-	struct net_device *netdev = dev_get_drvdata(&pdev->dev);
-
-	unregister_netdev(netdev);
-	free_netdev(netdev);
-	return 0;
-}
-
 static struct of_device_id octeon_mgmt_match[] = {
 	{
 		.compatible = "cavium,octeon-5750-mix",
diff -Naur a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
--- a/drivers/net/phy/phy.c	2015-02-03 13:12:04.000000000 -0800
+++ b/drivers/net/phy/phy.c	2015-06-10 11:24:30.243919792 -0700
@@ -746,10 +746,6 @@
 	int needs_aneg = 0;
 	int err = 0;
 
-//liteon+
-    static int error_count = 0;
-//liteon-
-
 	mutex_lock(&phydev->lock);
 
 	if (phydev->adjust_state)
@@ -773,19 +769,6 @@
 			if (err < 0)
 				break;
 
-//liteon+
-//fix "the front phy link up,but the cpu phy still AN..." in switch ic
-            if (phydev->link)
-            {
-                error_count++;
-                if (error_count > 5)
-                {
-                    phydev->link = 0;
-				    phydev->adjust_link(phydev->attached_dev);
-                    break;
-                }
-            }
-//liteon-
 			/* If the link is down, give up on
 			 * negotiation for now */
 			if (!phydev->link) {